'''
    author = "g0mx"
    version = "1.4"
    description = "Decrypt the string in Donot malware
    create_date = "20230908"
    modify_date = "20231005"
    
    sample_hash = "92a78894568e2e7869ef7ec454c52db3"
                  "fddaa64f75a229bd098967e485002e09"
                  "95DEE6D59C3E8BB46810B69D99EFD0EC"
'''

import idc, idaapi, idautils

def FindXorPattern():
    target_list = []
    for function_ea in idautils.Functions():
        function_name = idaapi.get_func_name(function_ea)
        if function_name.startswith("_") or function_name.startswith("?"):
            continue
        for ea in idautils.FuncItems(function_ea):
            mnem = idc.print_insn_mnem(ea)
            type_op_0 = idc.get_operand_type(ea, 0)
            type_op_1 = idc.get_operand_type(ea, 1)
            value_op_1 = idc.get_operand_value(ea, 1)
            if mnem == "xor" and type_op_0 == idaapi.o_reg and type_op_1 == idaapi.o_imm and value_op_1 == 0x3:
                target_list.append(ea)
    return target_list

def FindIncPattern():
    target_list = []
    for function_ea in idautils.Functions():
        function_name = idaapi.get_func_name(function_ea)
        if function_name.startswith("_") or function_name.startswith("?") or function_name == "sub_1001F8D7":
            continue
        for ea in idautils.FuncItems(function_ea):
            mnem = idc.print_insn_mnem(ea)
            type_op_0 = idc.get_operand_type(ea, 0)
            op_0 = idc.print_operand(ea, 0)
            if mnem == "inc" and type_op_0 == 0x4 and op_0.startswith("byte ptr [ebp"):
                target_list.append(ea)
            if mnem == "inc" and type_op_0 == 0x4 and op_0.startswith("byte ptr a"):
                target_list.append(ea)
    return target_list

def FindDecPattern():
    target_list = []
    for function_ea in idautils.Functions():
        function_name = idaapi.get_func_name(function_ea)
        if function_name.startswith("_") or function_name.startswith("?") or function_name == "sub_1001F8D7":
            continue
        for ea in idautils.FuncItems(function_ea):
            mnem = idc.print_insn_mnem(ea)
            type_op_0 = idc.get_operand_type(ea, 0)
            op_0 = idc.print_operand(ea, 0)
            if mnem == "dec" and type_op_0 == 0x4 and op_0.startswith("byte ptr [ebp"):
                target_list.append(ea)
            if mnem == "dec" and type_op_0 == 0x4 and op_0.startswith("byte ptr a"):
                target_list.append(ea)
            if mnem == "add" and type_op_0 == 0x2 and op_0.startswith("word ptr a"):
                target_list.append(ea)
    return target_list

def GetXorDataAddr(ea, key_reg):
    prev_ea  = idc.prev_head(ea)
    if idc.print_insn_mnem(prev_ea) == "mov":
        op_2 = idc.print_operand(prev_ea, 1)
        if idc.get_operand_type(prev_ea, 1) == 0x3:
            key_reg = op_2
            return GetXorDataAddr(prev_ea, key_reg)
        if idc.get_operand_type(prev_ea, 1) == 0x5 and idc.print_operand(prev_ea, 0) in key_reg:
            target_data_addr = idc.get_operand_value(prev_ea, 1)
            return target_data_addr, prev_ea
        else:
            return GetXorDataAddr(prev_ea, key_reg)
    else:
        return GetXorDataAddr(prev_ea, key_reg)
    
def GetIncOrDecDataAddr(ea, key, times):
    times += 1
    if times == 100:
        return None, None
    prev_ea = idc.prev_head(ea)
    if (idc.print_insn_mnem(prev_ea) == "movaps" or idc.print_insn_mnem(prev_ea) == "movups" or idc.print_insn_mnem(prev_ea) == "movq") and idc.print_operand(prev_ea, 0) == key:
        inc_data_addr = idc.get_operand_value(prev_ea, 1)
        return inc_data_addr, prev_ea
    elif (idc.print_insn_mnem(prev_ea) == "movups" or idc.print_insn_mnem(prev_ea) == "movq") and key in idc.print_operand(prev_ea, 0):
        key = idc.print_operand(prev_ea, 1)
        return GetIncOrDecDataAddr(prev_ea, key, times)
    else:
        return GetIncOrDecDataAddr(prev_ea, key, times)

def GetXorData(addr_list):
    target_comment_data = {}
    target_name_data = {}
    for ea in addr_list:
        key_reg = idc.print_operand(ea, 0)
        xor_data_addr, target_addr = GetXorDataAddr(ea, key_reg)
        if xor_data_addr != None:
            target_comment_data[target_addr] = idaapi.get_strlit_contents(xor_data_addr, -1, idaapi.STRTYPE_C)
            target_name_data[target_addr] = xor_data_addr
    return target_comment_data, target_name_data

def GetIncOrDecData(addr_list):
    target_comment_data = {}
    target_name_data = {}
    for ea in addr_list:
        op = idc.print_operand(ea, 0)
        if op.startswith("byte ptr a"):
            data_addr = idc.get_operand_value(ea, 0)
            target_comment_data[ea] = idaapi.get_strlit_contents(data_addr, -1, idaapi.STRTYPE_C)
            target_name_data[ea] = data_addr
        elif op.startswith("word ptr a"):
            data_addr = idc.get_operand_value(ea, 0)
            target_comment_data[ea] = idaapi.get_strlit_contents(data_addr, -1, idaapi.STRTYPE_C_16)
            target_name_data[ea] = data_addr
        else:
            key = op[10:13] + op[17:-1]
            data_addr, target_addr = GetIncOrDecDataAddr(ea, key, times = 0)
            if data_addr != None:
                target_comment_data[target_addr] = idaapi.get_strlit_contents(data_addr, -1, idaapi.STRTYPE_C)
                target_name_data[target_addr] = data_addr
    return target_comment_data, target_name_data

def AddComment(ea, comment):
    idc.set_cmt(ea, comment, 1)

def SetName(addr, name):
    idc.set_name(addr, name, idaapi.SN_NOCHECK)

def XorDecrypt(str, key):
    decrypt_str = ""
    for i in range(len(str)):
        decrypt_str += chr(ord(chr(str[i])) ^ key)
    return decrypt_str

def IncDecrypt(str):
    decrypt_str = ""
    for i in range(len(str)):
        decrypt_str += chr(str[i] + 1)
    return decrypt_str

def DecDecrypt(str):
    decrypt_str = ""
    for i in range(len(str)):
        decrypt_str += chr(str[i] - 1)
    return decrypt_str

if __name__ == "__main__":
    xor_pattern_list = FindXorPattern()
    xor_pattern_dict, xor_name_dict = GetXorData(xor_pattern_list)
    for addr, value in xor_pattern_dict.items():
        decrypt_str = XorDecrypt(value, 0x3)
        print("Xor Address: 0x{:X}, Value: {}, Decrypt string: {}".format(addr, value, decrypt_str))
        AddComment(addr, decrypt_str)
    for addr, name in xor_name_dict.items():
        decrypt_str = XorDecrypt(value, 0x3)
        name = "mw_v_" + decrypt_str + "_" + hex(addr)
        SetName(addr, name)

    
    inc_decrypted_dict = {}
    inc_pattern_list = FindIncPattern()
    inc_pattern_dict, inc_name_dict = GetIncOrDecData(inc_pattern_list)
    for addr, value in inc_pattern_dict.items():
        decrypted_str = IncDecrypt(value)
        while (decrypted_str in inc_decrypted_dict.values()):
            decrypted_str = IncDecrypt(decrypted_str.encode("utf-8"))
        inc_decrypted_dict[addr] = decrypted_str
    for addr, str in inc_decrypted_dict.items():
        print("Inc Address: 0x{:X}, decrypted_str is: {}".format(addr, str))
        AddComment(addr, str)
    # for addr, name in inc_name_dict.items():
    #     decrypt_str = IncDecrypt(value)
    #     name = "mw_v_" + decrypt_str + "_" + hex(addr)
    #     SetName(addr, name)


    dec_decrypted_dict = {}
    dec_pattern_list = FindDecPattern()
    dec_pattern_dict, dec_name_dict = GetIncOrDecData(dec_pattern_list)
    for addr, value in dec_pattern_dict.items():
        decrypted_str = DecDecrypt(value)
        while (decrypted_str in dec_decrypted_dict.values()):
            decrypted_str = DecDecrypt(decrypted_str.encode("utf-8"))
        dec_decrypted_dict[addr] = decrypted_str
    for addr, str in dec_decrypted_dict.items():
        print("Dec Address: 0x{:X}, decrypted_str is: {}".format(addr, str))
        AddComment(addr, str)
    # for addr, name in dec_name_dict.items():
    #     decrypt_str = DecDecrypt(value)
    #     name = "mw_v_" + decrypt_str + "_" + hex(addr)
    #     SetName(addr, name)