function FindDecryptMethod($methods) 
{
    foreach($method in $methods)
    {
        if (-not $method.HasBody){continue}
        if ($method.Parameters.Count -eq 1 -and $method.Parameters[0].Type.FullName -eq "System.Int32" -and $method.ReturnType.FullName -eq "System.String")
        {
            return $method
        }
    }
    return $null
}

[System.Reflection.Assembly]::LoadFile("C:\Users\g0mx\Desktop\work\dnlib.dll") | Out-Null
$file_path = "C:\Users\g0mx\Desktop\work\RCData1.bin"
$modify_path = $file_path + "_mod.exe"

$module_refl = [System.Reflection.Assembly]::LoadFile($file_path).Modules
$module_defmd = [dnlib.DotNet.ModuleDefMD]::Load($file_path)

$methods = $module_defmd.GetTypes().foreach{$_.Methods}
$decrypt_method = FindDecryptMethod -methods $methods
$Global:remove_method = @($decrypt_method)

if (-not $decrypt_method)
{
    Write-Host "Someting went wrong, string decryption method was not found!" -ForegroundColor Red;
    Exit 
}
foreach($method in $methods)
{
    if (-not $method.HasBody){continue}
    foreach($instr in $method.MethodBody.Instructions.ToArray())
    {
        if ($instr.OpCode.Name -like "call" -and $instr.Operand -eq $decrypt_method)
        {
            $index = $method.MethodBody.Instructions.IndexOf($instr)
            $para_1_instr = $method.MethodBody.Instructions[$index - 1]
            if (-not $para_1)
            {
                Write-Host "Someting went wrong, para was not found!" -ForegroundColor Red;
                Exit 
            }
            $decrypted_string = $module_refl.ResolveMethod($instr.Operand.MDToken.ToInt32()).Invoke($null, $para_1_instr.Operand)
            $method.MethodBody.Instructions[$index - 1].OpCode = [dnlib.DotNet.Emit.OpCodes]::Ldstr
            $method.MethodBody.Instructions[$index - 1].Operand = $decrypted_string
            $method.MethodBody.Instructions.RemoveAt($index)
        }
    }
    $method.MethodBody.UpdateInstructionOffsets() | Out-Null
}

foreach($method in $methods)
{
    if (-not $method.HasBody){continue}
    foreach($instr in $method.MethodBody.Instructions.ToArray())
    {
        if (-not ($instr.OpCode.Name -like "ldsfld" -and $instr.Operand.IsField)){continue}
        $index = $method.MethodBody.Instructions.IndexOf($instr)
        $field = $instr.Operand.FullName
        if ($field | Select-String -Pattern "A\.b")
        {
            $str = $module_refl.ResolveField($instr.Operand.MDToken.ToInt32()).GetValue($null)
            if (-not $str){continue}
            if (-not ($str.GetType().Name -eq "String")){continue}
            $method.MethodBody.Instructions[$index].OpCode = [dnlib.DotNet.Emit.OpCodes]::Ldstr
            $method.MethodBody.Instructions[$index].Operand = $str
        }
    }
    $method.MethodBody.UpdateInstructionOffsets() | Out-Null
}

foreach ($method in ($Global:remove_method | Sort-Object -Property MDToken -Unique))
{
    $method.DeclaringType.Remove($method)
}
$module_writer_options = [dnlib.DotNet.Writer.ModuleWriterOptions]::new($module_defmd)
$module_writer_options.MetadataOptions.Flags = $module_writer_options.MetadataOptions.Flags -bor [dnlib.DotNet.Writer.MetadataFlags]::KeepOldMaxStack
# $module_writer_options.Logger = [dnlib.DotNet.DummyLogger]::NoThrowInstance
$module_defmd.Write($modify_path, $module_writer_options)