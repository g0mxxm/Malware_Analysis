# The IDA Plugin of finding ARM64 syscall
# Create time: 20240120 15:00
# Version: 1.0
# Author: g0mx

import csv
import idc
import idautils

def CreateSyscallDict(syscall_file):
    syscall_dict = {}
    with open(syscall_file, 'r', newline='') as file:
        csv_reader = csv.reader(file)
        for row in csv_reader:
            if len(row) >= 2:
                syscall_number, syscall_name = int(row[0]), row[1]
                syscall_dict[syscall_number] = syscall_name   
    return syscall_dict

def FindSyscallNumber(ea):
    op = idc.print_insn_mnem(ea)
    oprand_0 = idc.get_operand_value(ea, 0)
    if op == "MOV" and oprand_0 == 0x89:
        syscall_number = idc.get_operand_value(ea, 1)
        return syscall_number
    else:
        last_line = idc.prev_head(ea)
        return FindSyscallNumber(last_line)


def FindSyscalls(syscall_dict):
    for func in idautils.Functions():
        dism_addr = list(idautils.FuncItems(func))
        for line in dism_addr:
            op = idc.print_insn_mnem(line)
            if op == "SVC":
                last_line = idc.prev_head(line)
                syscall_number = int(FindSyscallNumber(last_line))
                syscall_name = syscall_dict.get(syscall_number, "Unknown")
                print(f"Find SVC at {hex(line)} The syscall name for number {syscall_number} is: {syscall_name}")
                
                
if __name__ == "__main__":
    syscall_dict = CreateSyscallDict("G:\\Code\\sysref-master\\arm64.csv")
    FindSyscalls(syscall_dict)
